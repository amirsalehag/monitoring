version: "2.2"
services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
    volumes:
      - /data/certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: eslog\n"\
          "    dns:\n"\
          "      - eslog\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://eslog:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://eslog:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/eslog/eslog.crt ]"]
      interval: 3s
      timeout: 5s
      retries: 2
    networks:
      - efk

  eslog:
    depends_on:
      setup:
        condition: service_healthy
    container_name: eslog
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
    volumes:
      - /data/certs:/usr/share/elasticsearch/config/certs
      - /data/eslog/data:/usr/share/elasticsearch/data
      - /data/eslog/backup:/usr/share/elasticsearch/backup
    ports:
      - 9200:9200
    environment:
      - node.name=eslog
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=eslog
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - path.repo=/usr/share/elasticsearch/backup
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/eslog/eslog.key
      - xpack.security.http.ssl.certificate=certs/eslog/eslog.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/eslog/eslog.key
      - xpack.security.transport.ssl.certificate=certs/eslog/eslog.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - ES_JAVA_OPTS=-Xms3g -Xmx3g
    mem_limit: 4g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 30s
      timeout: 10s
      retries: 2
    logging:
      driver: "json-file"
      options:
        max-file: "1"
        max-size: "300m"
    networks:
      - efk

  kibana:
    depends_on:
      eslog:
        condition: service_healthy
    container_name: kibana
    restart: always
    image: docker.elastic.co/kibana/kibana:8.7.0
    volumes:
      - /data/certs:/usr/share/kibana/config/certs
    ports:
      - 5601:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://eslog:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: 2g
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 30s
      timeout: 10s
      retries: 2
    logging:
      driver: "json-file"
      options:
        max-file: "1"
        max-size: "300m"
    networks:
      - efk

  fluentd:
    #    build: ./fluentd
    image: fluentd:v1
    container_name: fluentd-server
    restart: always
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./fluentd/conf:/fluentd/etc
      - /data/certs/ca:/fluentd/certs/ca
        #  links:
        #      - "elasticsearch"
    ports:
      - "24225:24225"
      - "24225:24225/udp"
      - "24224:24224"
      - "24224:24224/udp"
    healthcheck:
      test: curl --fail -s http://localhost:24225 || exit 1
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 10s
    networks:
      - efk
    environment:
      - TZ=Asia/Tehran

networks:
  efk:
    name: efk
    external: true
